import java.util.ArrayList;

public class CaesarExploits
{
    public ArrayList alphabet;

    public CaesarExploits()
    {
        this.alphabet = new ArrayList();

        this.alphabet.add(0, 'a');
        this.alphabet.add(1, 'b');
        this.alphabet.add(2, 'c');
        this.alphabet.add(3, 'd');
        this.alphabet.add(4, 'e');
        this.alphabet.add(5, 'f');
        this.alphabet.add(6, 'g');
        this.alphabet.add(7, 'h');
        this.alphabet.add(8, 'i');
        this.alphabet.add(9, 'j');
        this.alphabet.add(10, 'k');
        this.alphabet.add(11, 'l');
        this.alphabet.add(12, 'm');
        this.alphabet.add(13, 'n');
        this.alphabet.add(14, 'o');
        this.alphabet.add(15, 'p');
        this.alphabet.add(16, 'q');
        this.alphabet.add(17, 'r');
        this.alphabet.add(18, 's');
        this.alphabet.add(19, 't');
        this.alphabet.add(20, 'u');
        this.alphabet.add(21, 'v');
        this.alphabet.add(22, 'w');
        this.alphabet.add(23, 'x');
        this.alphabet.add(24, 'y');
        this.alphabet.add(25, 'z');
    }

    public CaesarExploits(ArrayList alphabetVal)
    {
        this.alphabet = alphabetVal;
    }

    public int mod(int n, int m) {
        return ((n % m) + m) % m;
    }

    /* Only a copy of the cipher text is known, the best
    * course of action in this case is to try all 
    * possibilities*/
    public void ciphertextOnly(String ciphertext)
    {
        Caesar c;
        for(int i=0; i < alphabet.size(); i++)
        {
            c = new Caesar(i, this.alphabet);
            System.out.println(c.decrypt(ciphertext));
        }
    }

    /* a copy of both the plaintext and ciphertext is known,
    * deduce the key
    */
    public int knownPlaintext(String plaintext, String ciphertext)
    {
        return alphabet.indexOf(ciphertext.charAt(0)) - alphabet.indexOf(plaintext.charAt(0));
    }

    /* access to encryption machine. currently passes a
    * an object instance.
    */
    public int chosenPlaintext(Caesar cipher)
    {
        char ciphertext = cipher.encrypt(String.valueOf(this.alphabet.get(0))).charAt(0);
        return alphabet.indexOf(ciphertext);
    }

    /* access to decryption machine. currently passes a
    * an object instance.
    */
    public int chosenCiphertext(Caesar cipher)
    {
        char plaintext = cipher.decrypt(String.valueOf(this.alphabet.get(0))).charAt(0);
        int key =  alphabet.indexOf(plaintext);
        key = mod(key * (-1), this.alphabet.size());
        return key;
    }
}
